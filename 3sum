#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<vector<int>> threeSum(vector<int>& nums) {
    vector<vector<int>> result;
    int n = nums.size();

    sort(nums.begin(), nums.end());

    for (int i = 0; i < n - 2; i++) {

        if (i > 0 && nums[i] == nums[i - 1]) continue;

        int left = i + 1; 
        int right = n - 1; 
        int target = -nums[i]; 

        while (left < right) {
            int sum = nums[left] + nums[right];
            if (sum == target) {
 
                result.push_back({nums[i], nums[left], nums[right]});

                while (left < right && nums[left] == nums[left + 1]) left++;

                while (left < right && nums[right] == nums[right - 1]) right--;


                left++;
                right--;
            } else if (sum < target) {

                left++;
            } else {

                right--;
            }
        }
    }

    return result;
}

// Function to print the triplets
void printResult(const vector<vector<int>>& result) {
    for (const auto& triplet : result) {
        cout << "[" << triplet[0] << ", " << triplet[1] << ", " << triplet[2] << "] ";
    }
    cout << endl;
}

int main() {
    // Example test case
    vector<int> nums = {-1, 0, 1, 2, -1, -4};

    // Get the result
    vector<vector<int>> result = threeSum(nums);

    // Print the result
    cout << "Unique triplets that sum to 0: ";
    printResult(result);

    return 0;
}
